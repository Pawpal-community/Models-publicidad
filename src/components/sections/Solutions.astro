---
import { Image } from "astro:assets";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";
import Title from "../shared/Title.astro";
import GradiantText from "../shared/GradiantText.astro";
import myImage from "../../assets/images/dev-with-c-1.webp";
import { solutions } from "../../utils/data.ts";

type SolutionsProps = {
  title: string;
  painPoint: string;
  agitatepainPoint: string;
  solution: string;
  images: ImageMetadata[];
};

export interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<section id="solutions" class=`flex flex-col ${className}`>
  {
    solutions.map((solution: SolutionsProps, index: number) => {
      const oddIndex = index % 2 === 0;
      const flexRow = oddIndex ? "midmd:flex-row-reverse" : "midmd:flex-row";
      const bgColor = oddIndex
        ? "bg-orange-100 dark:bg-gray-800 "
        : "bg-transparent";
      const carouselId = `carousel-${index}`;

      return (
        <div class={`w-100 py-10 md:py-16 ${bgColor}`}>
          <div
            class={`flex flex-col gap-10 lg:gap-12 ${flexRow} mx-auto max-w-7xl w-full`}
          >
            <div class="max-w-md mx-auto w-11/12 flex-1 flex midmd:w-7/12 lg:w-1/2 flex-col">
              <h2 class="text-heading-1 font-semibold text-2xl sm:text-3xl md:text-4xl">
                <GradiantText>{solution.title}</GradiantText>
              </h2>
              <Paragraph className="mt-8 font-medium text:lg md:text-2xl">
                {solution.painPoint}
              </Paragraph>
              <Paragraph className="mt-3 ">
                {solution.agitatepainPoint}
              </Paragraph>
              <Paragraph className="mt-3 font-medium">
                {solution.solution}
              </Paragraph>
            </div>

            <div class="max-w-md mx-auto midmd:max-w-none lg:mx-0 lg:pr-10 xl:pr-2 flex-1 flex w-11/12 midmd:w-5/12 lg:w-1/2 midmd:h-auto">
              <div
                id={carouselId}
                class="w-full h-80 sm:h-96 midmd:h-full relative carousel-container"
              >
                {solution.images.map((image, imgIndex) => (
                  <div class="carousel-slide absolute bottom-0 left-1/2 -translate-x-1/2 w-full h-full opacity-0 transition-opacity duration-500">
                    <Image
                      src={image}
                      alt={`${solution.title} - image ${imgIndex + 1}`}
                      width="1240"
                      height="1385"
                      class="w-auto max-h-full rounded-3xl object-cover"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      );
    })
  }
</section>

<style>
  .carousel-container {
    position: relative;
    overflow: hidden;
  }

  .carousel-slide {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .carousel-slide.active {
    opacity: 1;
  }
</style>

<script>
  // Set up image carousels
  document.addEventListener("DOMContentLoaded", () => {
    const carousels = document.querySelectorAll(".carousel-container");

    carousels.forEach((carousel) => {
      const slides = carousel.querySelectorAll(".carousel-slide");
      let currentIndex = 0;

      // Make first slide visible
      if (slides.length > 0) {
        slides[0].classList.add("active");
      }

      // Set up interval to rotate images
      setInterval(() => {
        // Hide current image
        slides[currentIndex].classList.remove("active");

        // Move to next image
        currentIndex = (currentIndex + 1) % slides.length;

        // Show new image
        slides[currentIndex].classList.add("active");
      }, 2500); // Change image every 1 second
    });
  });
</script>
